redis-ha:
  enabled: true

controller:
  replicas: 1

server:
  replicas: 2

repoServer:
  replicas: 2

applicationSet:
  replicas: 2

global:
  domain: argocd.somaz.link

# azrue ad config
# configs:
#   cm:
#     dex.config: |
#       logger:
#         level: debug
#         format: json
#       connectors:
#         - type: saml
#           id: saml
#           name: saml
#           config:
#             entityIssuer: https://argocd.somaz.link/api/dex/callback
#             ssoURL: # <ssoURL>
#             caData: |
#               # <caData>
#             usernameAttr: email
#             emailAttr: email
#             groupsAttr: Group
#     exec.enabled: "false"
#     resource.compareoptions: |
#       ignoreAggregatedRoles: true
#     server.rbac.log.enforce.enable: "false"
#     url: https://argocd.somaz.link
#   params:
#     server.insecure: true
#   rbac:
#     policy.csv: |
#       p, role:somaz-default, applications, *, */*, deny
#       p, role:somaz-default, clusters, get, *, allow
#       p, role:somaz-default, repositories, get, *, allow
#       p, role:somaz-default, projects, get, *, allow
#     policy.default: role:somaz-default 

# # google oauth config
# configs:
#   cm:
#     dex.config: |
#       logger:
#         level: debug
#         format: json
#       connectors:
#         - type: oidc
#           id: google
#           name: Google
#           config:
#             issuer: https://accounts.google.com
#             clientID: <YOUR-CLIENT-ID>
#             clientSecret: $google-client-secret
#             redirectURI: https://<argocd-server-url>/auth/callback
#             hostedDomains:
#               - <argocd-server-url>
#     exec.enabled: "false"
#     resource.compareoptions: |
#       ignoreAggregatedRoles: true
#     server.rbac.log.enforce.enable: "false"
#     url: https://argocd.somaz.link
#   params:
#     server.insecure: true
#   rbac:
#   policy.csv: |
#     p, role:org-admin, applications, *, */*, allow
#     p, role:org-admin, clusters, get, *, allow
#     p, role:org-admin, repositories, get, *, allow
#     p, role:org-admin, repositories, create, *, allow
#     p, role:org-admin, repositories, update, *, allow
#     p, role:org-admin, repositories, delete, *, allow
#     p, role:org-admin, projects, get, *, allow
#     p, role:org-admin, projects, create, *, allow
#     p, role:org-admin, projects, update, *, allow
#     p, role:org-admin, projects, delete, *, allow
#     p, role:org-admin, logs, get, *, allow
#     p, role:org-admin, exec, create, */*, allow
#     g, somaz@example.com, role:org-admin
#   policy.default: role:readonly
#   scopes: [groups, email]

server:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    path: /
    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix
    tls: false

  ingressGrpc:
    enabled: false
    ingressClassName: nginx
    annotations:
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
