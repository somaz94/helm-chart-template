apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ke-use-nfs-server-sidecar-fluentbit.fullname" . }}
  labels:
    {{- include "ke-use-nfs-server-sidecar-fluentbit.labels" . | nindent 4 }}
spec:
  revisionHistoryLimit: {{ .Values.revisionHistoryLimit }}
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "ke-use-nfs-server-sidecar-fluentbit.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "ke-use-nfs-server-sidecar-fluentbit.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "ke-use-nfs-server-sidecar-fluentbit.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        {{- range $persistentVolumeClaim := .Values.persistentVolumeClaims }}
        - name: {{ $persistentVolumeClaim.type }}
          persistentVolumeClaim:
            claimName: {{ $persistentVolumeClaim.name }}
        {{- end}}
        {{- if .Values.sidecars.enabled }}
        - name: fluent-bit-config
          configMap:
            name: fluent-bit-configmap
        - name: shared-data
          emptyDir: {}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: NODE_ENV
              value: {{ .Values.envConfig.NODE_ENV }}
            - name: ENVIRONMENT
              value: {{ .Values.envConfig.ENVIRONMENT }}
          envFrom:
          {{- range $config := .Values.configs }}
            - configMapRef:
                name: {{ $config.name }}
          {{- end}}
          ports:
            {{- range .Values.service.ports }}
            {{- if eq .name "http" }}
            - name: {{ .name }}
              containerPort: {{ .targetPort }}
              protocol: TCP
            {{- end }}
            {{- end }}
          volumeMounts:
            {{- range $persistentVolumeClaim := .Values.persistentVolumeClaims }}
            - name: {{ $persistentVolumeClaim.type }}
              mountPath: {{ $persistentVolumeClaim.mountPath }}
            {{- end}}
            {{- if .Values.sidecars.enabled }}
            {{- range $container := .Values.sidecars.containers }}
            {{- range $volumeMount := $container.volumeMounts }}
            - name: {{ $volumeMount.name }}
              mountPath: {{ $volumeMount.mountPath }}
            {{- end}}
            {{- end}}
            {{- end}}
        {{- if .Values.sidecars.enabled }}
        {{- toYaml .Values.sidecars.containers | nindent 8 }}
        {{- end }}
          # livenessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

